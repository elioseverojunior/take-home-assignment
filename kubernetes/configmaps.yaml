---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-scripts
  namespace: webserver-assessment
  labels:
    app: dockerize
data:
  init.sql: |-
    CREATE DATABASE IF NOT EXISTS {{MYSQL_DATABASE}};
    CREATE USER IF NOT EXISTS {{MYSQL_USER}} IDENTIFIED BY '{{MYSQL_PASSWORD}}';
    GRANT ALL PRIVILEGES ON {{MYSQL_DATABASE}}.* TO {{MYSQL_USER}} WITH GRANT OPTION;
    GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, CREATE TEMPORARY TABLES ON {{MYSQL_DATABASE}}.* TO {{MYSQL_USER}} WITH GRANT OPTION;
    FLUSH PRIVILEGES;
    USE {{MYSQL_DATABASE}};

    SHOW GRANTS FOR {{MYSQL_USER}};

    CREATE TABLE IF NOT EXISTS articles
    (
      id         int unsigned auto_increment primary key,
      title      longtext    not null,
      post_text  longtext    not null,
      date       datetime(3) not null,
      image_url  longtext    not null
      );

    CREATE TABLE IF NOT EXISTS tags
    (
      id  int unsigned auto_increment primary key,
      tag varchar(500)  not null
      );

    CREATE TABLE IF NOT EXISTS articles_tags (
                                               id          INT unsigned AUTO_INCREMENT,
                                               pf_articles INT unsigned NOT NULL,
                                               pf_tags     INT unsigned NOT NULL,
                                               PRIMARY     KEY (id),
      FOREIGN     KEY (pf_articles) REFERENCES articles (id),
      FOREIGN     KEY (pf_tags) REFERENCES tags (id)
      );

    DROP VIEW IF EXISTS blog_posts;
    CREATE VIEW blog_posts AS
    SELECT
      articles.id AS idblog_posts,
      articles.title,
      articles.post_text,
      articles.date,
      articles.image_url,
      cast(concat('[', group_concat(json_quote(tags.tag) ORDER BY tags.tag SEPARATOR ','), ']') as json) AS tags
    FROM
      articles
        INNER JOIN articles_tags
                   ON articles.id = articles_tags.pf_articles
        INNER JOIN tags
                   ON articles_tags.pf_tags = tags.id
    GROUP BY articles.id;

    # Data
    INSERT INTO tags (tag) VALUES ('Automation');
    INSERT INTO tags (tag) VALUES ('DevOps');
    INSERT INTO tags (tag) VALUES ('DevSecOps');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('DevSecOps Assessment1', 'This is a Blog Test1', '2022-09-11 16:35:21.000', '../Images/DevSecOps.png');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('DevSecOps Assessment2', 'This is a Blog Test2', '2022-09-11 16:35:21.000', '../Images/Accelera-DevSecOps-Security-Controls-Infographic_v1.0_2020_feature.jpg');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('DevSecOps Assessment3', 'This is a Blog Test3', '2022-09-11 16:35:21.000', '../Images/devops-simbolo-01.png');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('Automation Assessment1', 'This is a Blog Automation Test1', '2022-09-11 16:35:21.000', '../Images/devops-tools.png');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('Automation Assessment2', 'This is a Blog Automation Test2', '2022-09-11 16:35:21.000', '../Images/devsecops-diagram.png');

    INSERT INTO articles (title, post_text, date, image_url)
    VALUES ('DevSecOps Automation Assessment1', 'This is a Blog Automation Test1', '2022-09-11 16:35:21.000', '../Images/finops.png');

    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (1, 2);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (1, 3);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (2, 2);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (2, 3);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (3, 2);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (3, 3);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (4, 1);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (5, 1);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (6, 1);
    INSERT INTO articles_tags (pf_articles, pf_tags) VALUES (6, 2);
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: executable-scripts
  namespace: webserver-assessment
  labels:
    app: dockerize
data:
  init.sh: |-
    #!/bin/sh

    # Init Container Script
    date -u '+%Y-%m-%d_%H:%M:%S'

    cat /app/server.config
    cat /app/init.sql
    cat /app/init.sh

    secs=30;
    while [ $secs -gt 0 ]; do
      echo -ne "Waiting for $secs\033[0K\r"
      sleep 1
      : $((secs--))
    done

  prestop.sh: |-
    #!/bin/sh

    # PreStop Script for Graceful Shooting Down
    echo "Stopping container now..." && kill -n SIGINT 1 > /proc/1/fd/1

  init-sql-db.sh: |-
    #!/usr/bin/env sh

    set -e pipefail

    # Reset
    NC='\033[0m'

    # Regular Colors
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White

    # Bold
    BBlack='\033[1;30m'       # Black
    BRed='\033[1;31m'         # Red
    BGreen='\033[1;32m'       # Green
    BYellow='\033[1;33m'      # Yellow
    BBlue='\033[1;34m'        # Blue
    BPurple='\033[1;35m'      # Purple
    BCyan='\033[1;36m'        # Cyan
    BWhite='\033[1;37m'       # White

    # Underline
    UBlack='\033[4;30m'       # Black
    URed='\033[4;31m'         # Red
    UGreen='\033[4;32m'       # Green
    UYellow='\033[4;33m'      # Yellow
    UBlue='\033[4;34m'        # Blue
    UPurple='\033[4;35m'      # Purple
    UCyan='\033[4;36m'        # Cyan
    UWhite='\033[4;37m'       # White

    # Background
    On_Black='\033[40m'       # Black
    On_Red='\033[41m'         # Red
    On_Green='\033[42m'       # Green
    On_Yellow='\033[43m'      # Yellow
    On_Blue='\033[44m'        # Blue
    On_Purple='\033[45m'      # Purple
    On_Cyan='\033[46m'        # Cyan
    On_White='\033[47m'       # White

    # High Intensity
    IBlack='\033[0;90m'       # Black
    IRed='\033[0;91m'         # Red
    IGreen='\033[0;92m'       # Green
    IYellow='\033[0;93m'      # Yellow
    IBlue='\033[0;94m'        # Blue
    IPurple='\033[0;95m'      # Purple
    ICyan='\033[0;96m'        # Cyan
    IWhite='\033[0;97m'       # White

    # Bold High Intensity
    BIBlack='\033[1;90m'      # Black
    BIRed='\033[1;91m'        # Red
    BIGreen='\033[1;92m'      # Green
    BIYellow='\033[1;93m'     # Yellow
    BIBlue='\033[1;94m'       # Blue
    BIPurple='\033[1;95m'     # Purple
    BICyan='\033[1;96m'       # Cyan
    BIWhite='\033[1;97m'      # White

    # High Intensity backgrounds
    On_IBlack='\033[0;100m'   # Black
    On_IRed='\033[0;101m'     # Red
    On_IGreen='\033[0;102m'   # Green
    On_IYellow='\033[0;103m'  # Yellow
    On_IBlue='\033[0;104m'    # Blue
    On_IPurple='\033[0;105m'  # Purple
    On_ICyan='\033[0;106m'    # Cyan
    On_IWhite='\033[0;107m'   # White

    function decrypt() {
      echo $(echo "${1}" | base64 -d)
    }

    function show_message() {
      message="$1"
      separator="*"
      width=$((${#message} + 6))
      echo; echo -e "${BIGreen}"; printf %.s${separator} $(seq 1 ${width}); echo
      echo "-> ${message} <-"
      printf %.s${separator} $(seq 1 ${width}); echo -e "${NC}"
    }

    function main() {
      local mysql_root_user=${MYSQL_ROOT_USER}
      local mysql_root_password=${MYSQL_ROOT_PASSWORD}
      local mysql_user=${MYSQL_USER}
      local mysql_password=${MYSQL_PASSWORD}
      local mysql_database=${MYSQL_DATABASE}
      local mysql_host=${MYSQL_HOST}
      local mysql_port=${MYSQL_PORT}

      show_message "MySQL Database Creation for Take Home Assignment"

      show_message "Updating MySQL Initialization Script"
      sed -e "s|{{MYSQL_DATABASE}}|${mysql_database}|g"\
      -e "s|{{MYSQL_USER}}|${mysql_user}|g"\
      -e "s|{{MYSQL_PASSWORD}}|${mysql_password}|g"\
      "/tmp/init.sql" > "/tmp/deploy_init.sql";

      show_message "Applying MySQL Initialization Script"
      mysql -h${mysql_host} -u${mysql_root_user} -p${mysql_root_password} < "/tmp/deploy_init.sql";

      show_message "Done."
      rm -rf "/tmp/deploy_init.sql";
    }

    time main
