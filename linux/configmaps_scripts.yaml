apiVersion: v1
kind: ConfigMap
metadata:
  name: executable-scripts
  namespace: webserver-assessment
  labels:
    app: dockerize
data:
  init.sh: |-
    #!/bin/sh

    # Init Container Script
    date -u '+%Y-%m-%d_%H:%M:%S'

    cat /app/server.config
    cat /app/init.sql
    cat /app/init.sh

    secs=30;
    while [ $secs -gt 0 ]; do
      echo -ne "Waiting for $secs\033[0K\r"
      sleep 1
      : $((secs--))
    done

  init-sql-db.sh: |-
    #!/usr/bin/env sh

    set -e pipefail

    # Reset
    NC='\033[0m'

    # Regular Colors
    Black='\033[0;30m'        # Black
    Red='\033[0;31m'          # Red
    Green='\033[0;32m'        # Green
    Yellow='\033[0;33m'       # Yellow
    Blue='\033[0;34m'         # Blue
    Purple='\033[0;35m'       # Purple
    Cyan='\033[0;36m'         # Cyan
    White='\033[0;37m'        # White

    # Bold
    BBlack='\033[1;30m'       # Black
    BRed='\033[1;31m'         # Red
    BGreen='\033[1;32m'       # Green
    BYellow='\033[1;33m'      # Yellow
    BBlue='\033[1;34m'        # Blue
    BPurple='\033[1;35m'      # Purple
    BCyan='\033[1;36m'        # Cyan
    BWhite='\033[1;37m'       # White

    # Underline
    UBlack='\033[4;30m'       # Black
    URed='\033[4;31m'         # Red
    UGreen='\033[4;32m'       # Green
    UYellow='\033[4;33m'      # Yellow
    UBlue='\033[4;34m'        # Blue
    UPurple='\033[4;35m'      # Purple
    UCyan='\033[4;36m'        # Cyan
    UWhite='\033[4;37m'       # White

    # Background
    On_Black='\033[40m'       # Black
    On_Red='\033[41m'         # Red
    On_Green='\033[42m'       # Green
    On_Yellow='\033[43m'      # Yellow
    On_Blue='\033[44m'        # Blue
    On_Purple='\033[45m'      # Purple
    On_Cyan='\033[46m'        # Cyan
    On_White='\033[47m'       # White

    # High Intensity
    IBlack='\033[0;90m'       # Black
    IRed='\033[0;91m'         # Red
    IGreen='\033[0;92m'       # Green
    IYellow='\033[0;93m'      # Yellow
    IBlue='\033[0;94m'        # Blue
    IPurple='\033[0;95m'      # Purple
    ICyan='\033[0;96m'        # Cyan
    IWhite='\033[0;97m'       # White

    # Bold High Intensity
    BIBlack='\033[1;90m'      # Black
    BIRed='\033[1;91m'        # Red
    BIGreen='\033[1;92m'      # Green
    BIYellow='\033[1;93m'     # Yellow
    BIBlue='\033[1;94m'       # Blue
    BIPurple='\033[1;95m'     # Purple
    BICyan='\033[1;96m'       # Cyan
    BIWhite='\033[1;97m'      # White

    # High Intensity backgrounds
    On_IBlack='\033[0;100m'   # Black
    On_IRed='\033[0;101m'     # Red
    On_IGreen='\033[0;102m'   # Green
    On_IYellow='\033[0;103m'  # Yellow
    On_IBlue='\033[0;104m'    # Blue
    On_IPurple='\033[0;105m'  # Purple
    On_ICyan='\033[0;106m'    # Cyan
    On_IWhite='\033[0;107m'   # White

    function check_if_mysql_is_ready() {
      echo "$(MYSQL_PWD=${mysql_root_password} mysqladmin -h${mysql_host} -u${mysql_root_user} ping)"
    }

    function show_message() {
      message="$1"
      separator="*"
      width=$((${#message} + 6))
      echo; echo -e "${BIGreen}"; printf %.s${separator} $(seq 1 ${width}); echo
      echo "-> ${message} <-"
      printf %.s${separator} $(seq 1 ${width}); echo -e "${NC}"
    }

    function main() {
      show_message "MySQL Database Creation for Take Home Assignment"
      while [[ "$(check_if_mysql_is_ready)" != "mysqld is alive" ]];
      do
        sleep 1;
        check_if_mysql_is_ready
      done
      show_message "MySQL is Ready Now"

      show_message "Updating MySQL Initialization Script"
      sed -e "s|{{MYSQL_DATABASE}}|${MYSQL_DATABASE}|g"\
        -e "s|{{MYSQL_USER}}|${MYSQL_USER}|g"\
        -e "s|{{MYSQL_PASSWORD}}|${MYSQL_PASSWORD}|g"\
        "/tmp/init.sql" > "/tmp/deploy_init.sql";

      show_message "Applying MySQL Initialization Script"
      MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysql -h${MYSQL_HOST} -u${MYSQL_ROOT_USER} -e < "/tmp/deploy_init.sql";

      show_message "Executing Query into ${mysql_database}"
      MYSQL_PWD=${MYSQL_PASSWORD} mysql -h${MYSQL_HOST} -u${MYSQL_USER} -s -r -e < echo "SELECT VERSION();"

      show_message "Done."
      # rm -rf "/tmp/deploy_init.sql";
    }

    time main

  healthcheck-liveness.sh: |
    #!/bin/bash
    if [[ $(MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysqladmin ping -u${MYSQL_ROOT_USER} 2> /dev/null | grep alive | wc -l) == 1 ]];
    then
        echo "$(MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysqladmin ping -u${MYSQL_ROOT_USER} 2> /dev/null). Ok"
        exit 0
    else
        echo "$(MYSQL_PWD=${MYSQL_ROOT_PASSWORD} mysqladmin ping -u${MYSQL_ROOT_USER} 2> /dev/null). No Ok"
        exit 1
    fi
  healthcheck-readiness.sh: |
    #!/bin/bash
    if [[ "$(MYSQL_PWD=${MYSQL_PASSWORD} mysql -h${MYSQL_HOST} -u${MYSQL_USER} -s -r -e "SELECT VERSION();" | awk -F'.' '{print $1}')" == 8 ]];
    then
        echo "$(MYSQL_PWD=${MYSQL_PASSWORD} mysql -h${MYSQL_HOST} -u${MYSQL_USER} -s -r -e "SELECT VERSION();" | awk -F'.' '{print $1}'). Ok"
        exit 0
    else
        echo "$(MYSQL_PWD=${MYSQL_PASSWORD} mysql -h${MYSQL_HOST} -u${MYSQL_USER} -s -r -e "SELECT VERSION();" | awk -F'.' '{print $1}'). No Ok"
        exit 1
    fi
  prestop.sh: |-
    #!/bin/sh
    # PreStop Script for Graceful Shooting Down
    echo "Stopping container now..." && kill -n SIGINT 1 > /proc/1/fd/1
